import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;


class Task implements Callable<String> 
{
    private final String name;
 
    public Task(String name) {
        this.name = name;
        System.out.println("Task " + this.name + " was started at " + LocalDateTime.now().toString());
    }
 
    @Override
    public String call() throws Exception {
        return "Task [" + name + "] executed on : " + LocalDateTime.now().toString();
    }
}


class MySheduler {
	private long competitionStartAt;
	private long startTimeInSeconds;
	private long finishTimeInSeconds;
	private long competitionDuration;
	private String competitionName;
	
	public MySheduler(String compName, LocalDateTime start, LocalDateTime finish, LocalDateTime applicationStartedAt) {
		this.competitionName = compName;
		this.startTimeInSeconds = start.toEpochSecond(ZoneOffset.UTC);
		this.finishTimeInSeconds = finish.toEpochSecond(ZoneOffset.UTC);
		this.competitionStartAt = start.toEpochSecond(ZoneOffset.UTC) - applicationStartedAt.toEpochSecond(ZoneOffset.UTC);
		this.competitionDuration = this.finishTimeInSeconds - this.startTimeInSeconds;
		
		
	}
	
	public String getCompetitionName() {
		return this.competitionName;
	}
	
	public long getCompetitonDuration() {
		return competitionDuration;
	}
	
	public long getCompetitionStartAt() {
		return competitionStartAt;
	}
	
	
	
	
	
}


public class MyTests {

	private static Path getFilePath(String path) {
        if ("/".equals(path)) {
            path = "index.html";
        }
        return Paths.get("", path);
    }
	
	
	private static List<Integer> findImageSources(String textString, String word) {
	    List<Integer> indexes = new ArrayList<Integer>();
	    StringBuilder output = new StringBuilder();
	    String lowerCaseTextString = textString.toLowerCase();
	    String lowerCaseWord = word.toLowerCase();
	    int wordLength = 0;

	    int index = 0;
	    while(index != -1){
	        index = lowerCaseTextString.indexOf(lowerCaseWord, index + wordLength);  // Slight improvement
	        if (index != -1) {
	            indexes.add(index);
	        }
	        wordLength = word.length();
	    }
	    return indexes;
	}
	
	
	public static int i = 0;
	
	public static void main(String[] args) throws IOException {
//		String appStartUpPath = System.getProperty("user.dir") + "\\";
//		Path filePath = getFilePath(appStartUpPath + "index.html");
//		byte[] bytes = Files.readAllBytes(filePath);
//		String s = new String(bytes, StandardCharsets.UTF_8);
//		String wordToFind = "img src=";
//		List<Integer> arrayList = findImageSources(s, wordToFind);
//		for (int i = 0; i < arrayList.size(); i++) {
//			int el = arrayList.get(i);
//			arrayList.set(i, el + wordToFind.length()+1);
//		}
//		for (int i = 0; i < arrayList.size(); i++) {
//			int index = s.indexOf("\"", arrayList.get(i));
//			String file = s.substring(arrayList.get(i) + "images".length() + 1, index );
//			byte[] img = Files.readAllBytes(Paths.get(appStartUpPath + "images\\" + file));
//			String str = Base64.getEncoder().encodeToString(img);
//			s = s.replace("images/"+file, str); 
//		}
//		
//		BufferedWriter writer = new BufferedWriter(new FileWriter("test.txt"));
//	    writer.write(s);
//	    
//	    writer.close();
		
		LocalDateTime startPoint = LocalDateTime.now();
		
		LocalDateTime applStartAt = LocalDateTime.now();
		//ArrayList<MySheduler> arr = new ArrayList<MySheduler>();
		
		LocalDateTime ld_s1 = LocalDateTime.parse("21.12.2021 20:27:00", DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"));
		LocalDateTime ld_f1 = LocalDateTime.parse("21.12.2021 20:27:10", DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"));
		
		LocalDateTime ld_s2 = LocalDateTime.parse("21.12.2021 20:27:30", DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"));
		LocalDateTime ld_f2 = LocalDateTime.parse("21.12.2021 20:27:40", DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"));
		
		LocalDateTime ld_s3 = LocalDateTime.parse("21.12.2021 20:27:50", DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"));
		LocalDateTime ld_f3 = LocalDateTime.parse("21.12.2021 20:27:55", DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"));
		
		
		
		
//		Runnable myTask = new Runnable() {
//			@Override
//			public void run() {
//				 System.out.println("Task was started at " + LocalDateTime.now().toString());
//			}
//		};
		
		
		ArrayList<Long> delays = new ArrayList<Long>();
		ArrayList<Long> timeOfJob = new ArrayList<Long>();
		
		
		delays.add(Duration.between(LocalDateTime.now(), ld_s1).getSeconds());
		delays.add(Duration.between(ld_f1, ld_s2).getSeconds());
		delays.add(Duration.between(ld_f2, ld_s3).getSeconds());
		
		timeOfJob.add(Duration.between(ld_s1, ld_f1).getSeconds());
		timeOfJob.add(Duration.between(ld_s2, ld_f2).getSeconds());
		timeOfJob.add(Duration.between(ld_s3, ld_f3).getSeconds());
		
		ArrayList<Long> timesOfStart = new ArrayList<Long>();
		timesOfStart.add(ld_s1.toEpochSecond(ZoneOffset.UTC));
		timesOfStart.add(ld_s2.toEpochSecond(ZoneOffset.UTC));
		timesOfStart.add(ld_s3.toEpochSecond(ZoneOffset.UTC));
		
		ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
        List<ScheduledFuture<String>> results = new ArrayList<ScheduledFuture<String>>();
 
        for (int i = 0; i < timesOfStart.size(); i++) 
        {
            
            //ScheduledFuture<String> result = executor.schedule(task, 10,  TimeUnit.SECONDS);
            //Task task = new Task("Task-" + i);
            try {
				Thread.sleep(delays.get(i));
			} catch (InterruptedException e1) {
				
			}
        	ScheduledFuture<String> result = executor.schedule(new Task("Task-" + i), timesOfStart.get(i),  TimeUnit.SECONDS);
            
            //results.add(result)
            try {
				System.out.println(result.get());
			} catch (Exception e) {
		
			} 
        }
         
        executor.shutdown();
         
        try { 
            executor.awaitTermination(1, TimeUnit.DAYS); 
             
            for(ScheduledFuture<String> result : results) {
                System.out.println(result.get());
            }
             
        } catch (Exception e) { 
            e.printStackTrace(); 
        }
    
		
	}

}
